// MP1: Warm up
// Course: CSS290, Fall 2025
// Author: Kelvin Sung
// Program:
/*
Write a program that tells what coins to give out for any amount of change from 
1 cent to 99 cents. For example, if the amount is 86 cents, the output would be 
something like the following:

    86 cents can be given as
        3 quarter(s) 1 dime(s) and 1 penny(pennies)
    Use coin denominations of 25 cents (quarters), 10 cents (dimes), and 1 cent (pennies). 

Do not use nickel (5 cents) and half-dollar (50 cents) coins. Your program will 
use the following function (among others):

    void computeCoins(int coinValue, int& num, int& amountLeft);
    //Precondition: 0 < coinValue < 100; 0 <= amountLeft < 100.
    //Postcondition: num has been set equal to the maximum number
    //of coins of denomination coinValue cents that can be obtained
    //from amountLeft. Additionally, amountLeft has been decreased
    //by the value of the coins, that is, decreased by
    //num * coinValue.

    For example, suppose the value of the variable amountLeft is 86. Then, after the 
following call, the value of number will be 3 and the value of amountLeft will be 11 
(because if you take 3 quarters from 86 cents, that leaves 11 cents):

    computeCoins(25, number, amountLeft);
    
Include a loop that lets the user repeat this computation for new input values until 
the user says he or she wants to end the program. (Hint: Use integer division and the 
% (modulo operator) operator to implement this function.)
*/

// The following solution is generated by the GitHub's VSC Copilot tool. 
// I modified the code in the following ways:
//    1. Added comments to explain the code.
//    2. Used constants for coin values to improve readability.
//    3. Improved formatting of output for better readability.

#include <iostream>
using namespace std;

// constants
const int QUARTER_VALUE = 25;
const int DIME_VALUE = 10;

// function prototype
void computeCoins(int coinValue, int& num, int& amountLeft);
    // this is forward declaration of the function

int main() {
    int quarters, dimes, pennies;
    int amountLeft;
    char repeat;
    do {
        // get user input and confirms with the user
        cout << "Enter an amount in cents (0-99): ";
        cin >> amountLeft;
        cout << "You have entered: " << amountLeft << " cents." << endl;

        // Performs the computations
        computeCoins(QUARTER_VALUE, quarters, amountLeft);  // compute num quarters and update amountLeft
        computeCoins(DIME_VALUE, dimes, amountLeft);        // compute num dimes and update amountLeft
        pennies = amountLeft;    // compute num pennies and update amountLeft
        
        // Now echo output to the user
        cout << "Your changes are: ";  // Notes, this line does not end
        cout << "Quarters(" << quarters << ") Dimes(" << dimes << ") Pennies(" << pennies << ")" << endl;
        cout << "Would you like to enter another amount? (y/n): ";
        cin >> repeat;
    } while (repeat == 'y' || repeat == 'Y');
        // The "y" and 'y' should be defined as constants
        // But, this is similar to the case of 0 and 1, 
        // Similiar to the case when we want to iterate through a loop, we always begin with a 0
        // When answering a question yes/no, we always begin with a "y" or "Y"
    return 0;
}

// Function: computeCoins
// Purpose: To compute the maximum number of coins of a given denomination that can be obtained from a given amount.
// Parameters:
//    coinValue - the value of the coin denomination (in cents)
//    num - reference to an integer that will hold the number of coins of the given denomination
//    amountLeft - reference to an integer that holds the remaining amount of money (in cents
// Precondition: 0 < coinValue < 100; 0 <= amountLeft < 100.
// Postcondition: num has been set equal to the maximum number of coins of 
//               denomination coinValue cents that can be obtained from amountLeft. 
//               Additionally, amountLeft has been decreased by the value of the coins, 
//               that is, decreased by num * coinValue.
void computeCoins(int coinValue, int& num, int& amountLeft) {
    num = amountLeft / coinValue;  // integer division to get number of coins
    amountLeft = amountLeft - (num * coinValue); // update amount left
}     